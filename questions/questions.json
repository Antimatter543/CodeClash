[
    {
        "title": "76. Minimum Window Substring",
        "details": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\". The testcases will be generated such that the answer is unique. A substring is a contiguous sequence of characters within the string.",
        "examples": [
            {
                "input": "s = \"a\", t = \"aa\"",
                "output": "\"\"",
                "explanation": "Both 'a's from t must be included in the window."
            }
        ],
        "constraints": [
            "",
            "m == s.length",
            "n == t.length",
            "1 <= m, n <= 105",
            "s and t consist of uppercase and lowercase English letters.",
            "",
            "",
            "Follow up: Could you find an algorithm that runs in O(m + n) time?"
        ]
    },
    {
        "title": "119. Pascal's Triangle II",
        "details": "Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",
        "examples": [
            {
                "input": "rowIndex = 1",
                "output": "[1,1]"
            }
        ],
        "constraints": [
            "",
            "0 <= rowIndex <= 33",
            "",
            "",
            "Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?"
        ]
    },
    {
        "title": "287. Find the Duplicate Number",
        "details": "Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive. There is only one repeated number in nums, return this repeated number. You must solve the problem without modifying the array nums and uses only constant extra space.",
        "examples": [
            {
                "input": "nums = [1,1,2]",
                "output": "1"
            }
        ],
        "constraints": [
            "",
            "1 <= n <= 105",
            "nums.length == n + 1",
            "1 <= nums[i] <= n",
            "All the integers in nums appear only once except for precisely one integer which appears two or more times.",
            "",
            "",
            "Follow up:",
            "",
            "How can we prove that at least one duplicate number must exist in nums?",
            "Can you solve the problem in linear runtime complexity?"
        ]
    },
    {
        "title": "557. Reverse Words in a String III",
        "details": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",
        "examples": [
            {
                "input": "s = \"God Ding\"",
                "output": "\"doG gniD\""
            }
        ],
        "constraints": [
            "",
            "1 <= s.length <= 5 * 10^4",
            "s contains printable ASCII characters.",
            "s does not contain any leading or trailing spaces.",
            "There is at least one word in s.",
            "All the words in s are separated by a single space."
        ]
    },
    {
        "title": "1048. Longest String Chain",
        "details": "You are given an array of words where each word consists of lowercase English letters. wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB. For example, \"abc\" is a predecessor of \"abac\", while \"cba\" is not a predecessor of \"bcad\". A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1. Return the length of the longest possible word chain with words chosen from the given list of words.",
        "examples": [
            {
                "input": "words = [\"abcd\",\"dbqca\"]",
                "output": "1",
                "explanation": "The trivial word chain [\"abcd\"] is one of the longest word chains."
            }
        ],
        "constraints": [
            "",
            "1 <= words.length <= 1000",
            "1 <= words[i].length <= 16",
            "words[i] only consists of lowercase English letters."
        ]
    }
]
